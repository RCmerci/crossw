module Common (
  raceMany,
  ) where

import Control.Concurrent.Async as CCA
import Control.Concurrent



raceMany :: [IO a] -> IO (Maybe a)
raceMany [] = return Nothing
raceMany (h:t) = Just <$>
  foldl (\r a ->
          (\e -> case e of
            Left  a -> a
            Right a -> a) <$> CCA.race a r)
  h t
  
timeout :: Int -> IO a -> IO (Maybe a)
timeout n m
    | n <  0    = fmap Just m
    | n == 0    = return Nothing
    | otherwise = do
        r <- CCA.race (threadDelay n) m
        case r of
          Left _  -> return Nothing
          Right a -> return (Just a)
